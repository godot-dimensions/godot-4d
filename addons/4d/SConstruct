#!/usr/bin/env python

# This file is for building as a Godot GDExtension.

env = SConscript("src/godot-cpp/SConstruct")

# Add source files.
env.Append(
    CPPPATH=[
        "./,src/,../../",
        "../../math",
        "../../math/geometric_algebra",
        "../../nodes",
        "../../resources",
        "../../model",
        "../../model/g4mf",
        "../../model/g4mf/structures",
        "../../model/g4mf/structures/physics",
        "../../model/off",
        "../../model/tetra",
        "../../model/wire",
        "../../physics",
        "../../physics/bodies",
        "../../physics/server",
        "../../physics/shapes",
        "../../render",
        "../../render/wireframe_canvas",
    ]
)

sources = (
    Glob("*.cpp")
    + Glob("src/*.cpp")
    + Glob("../../*.cpp")
    + Glob("../../math/*.cpp")
    + Glob("../../math/geometric_algebra/*.cpp")
    + Glob("../../nodes/*.cpp")
    + Glob("../../resources/*.cpp")
    + Glob("../../model/*.cpp")
    + Glob("../../model/g4mf/*.cpp")
    + Glob("../../model/g4mf/structures/*.cpp")
    + Glob("../../model/g4mf/structures/physics/*.cpp")
    + Glob("../../model/off/*.cpp")
    + Glob("../../model/tetra/*.cpp")
    + Glob("../../model/wire/*.cpp")
    + Glob("../../physics/*.cpp")
    + Glob("../../physics/bodies/*.cpp")
    + Glob("../../physics/server/*.cpp")
    + Glob("../../physics/shapes/*.cpp")
    + Glob("../../render/*.cpp")
    + Glob("../../render/wireframe_canvas/*.cpp")
)

env.Append(CPPDEFINES=["GDEXTENSION"])

if env["target"] == "editor":
    env.Append(
        CPPPATH=[
            "../../editor",
            "../../editor/icons",
            "../../editor/import",
            "../../editor/import/g4mf",
            "../../editor/import/off",
            "../../editor/viewport",
        ]
    )
    sources += Glob("../../editor/*.cpp")
    sources += Glob("../../editor/icons/*.cpp")
    sources += Glob("../../editor/import/g4mf/*.cpp")
    sources += Glob("../../editor/import/off/*.cpp")
    sources += Glob("../../editor/viewport/*.cpp")

if env["platform"] == "windows":
    if env["OBJSUFFIX"].endswith(".obj"):
        env["OBJSUFFIX"] = env["OBJSUFFIX"][:-4] + ".o.obj"

bin_path = "bin/"
extension_name = "godot_4d"
debug_or_release = "release" if env["target"] == "template_release" else "debug"

if not "arch_suffix" in env:
    env["arch_suffix"] = env["arch"]

if env["target"] in ["editor", "template_debug"]:
    try:
        doc_data = env.GodotCPPDocData(
            "src/gen/doc_data.gen.cpp", source=Glob("doc_classes/*.xml")
        )
        sources.append(doc_data)
    except AttributeError:
        print("Not including class reference as we're targeting a pre-4.3 baseline.")

# Create the library target (e.g. libgodot_4d.linux.debug.x86_64.so).
if env["platform"] == "macos":
    library = env.SharedLibrary(
        "{0}/lib{1}.{2}.{3}.framework/{1}.{2}.{3}".format(
            bin_path,
            extension_name,
            env["platform"],
            debug_or_release,
        ),
        source=sources,
    )
else:
    library = env.SharedLibrary(
        "{}/lib{}.{}.{}.{}{}".format(
            bin_path,
            extension_name,
            env["platform"],
            debug_or_release,
            env["arch_suffix"],
            env["SHLIBSUFFIX"],
        ),
        source=sources,
    )

Default(library)

# The rest of this file handles generating the 4D icons header file.
import importlib.util
import os
import sys
editor_4d_icon_generator_path = os.path.abspath(os.path.join('../../editor/icons/editor_4d_icon_generator.py'))
spec = importlib.util.spec_from_file_location("editor_4d_icon_generator", editor_4d_icon_generator_path)
editor_4d_icon_generator = importlib.util.module_from_spec(spec)
sys.modules["editor_4d_icon_generator"] = editor_4d_icon_generator
spec.loader.exec_module(editor_4d_icon_generator)

target_file_path = "../../editor/icons/editor_4d_icons.gen.h"
icon_sources = Glob("icons/4D.svg") + Glob("icons/Node4D.svg")
editor_4d_icon_generator.make_editor_4d_icons_action([target_file_path], icon_sources, env)
