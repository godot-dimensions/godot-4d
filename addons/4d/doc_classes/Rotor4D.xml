<?xml version="1.0" encoding="UTF-8" ?>
<class name="Rotor4D" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		4D geometric algebra rotor for smooth rotations in 4D space.
	</brief_description>
	<description>
		Rotor4D is a 4D geometric algebra rotor that can be used to represent rotations in 4D space. It is the 4D equivalent of a quaternion, which allows for 3D rotations. Quaternions are isomorphic to 3D rotors, which means that the calculations work out to be the same, but rotors are more general and can represent rotations in any number of dimensions.
		In geometric algebra terms, a rotor is a multivector that represents a rotation in a subspace. The rotor is a sum of a scalar part, a bivector part, and for double rotations, a pseudoscalar part. For simple rotations, the scalar part represents the cosine of half the rotation angle, and the bivector part represents the sine of half the rotation angle. The bivector part is a sum of the shadows of the rotation in each plane of the subspace.
	</description>
	<tutorials>
		<link title="An Overview of the Operations in Geometric Algebra by sudgylacmoe">https://www.youtube.com/watch?v=2AKt6adG_OI</link>
	</tutorials>
	<methods>
		<method name="conjugate" qualifiers="const">
			<return type="Rotor4D" />
			<description>
				Conjugate flips the sign of the bivector components. For 4D rotors, this is identical to the [method reverse], but both are included for completeness and clarity.
			</description>
		</method>
		<method name="copy" qualifiers="const">
			<return type="Rotor4D" />
			<description>
				Returns a copy of this [Rotor4D] resource. Note that without copying, [Rotor4D] is pass-by-reference, like all Godot objects, and unlike structs such as [Vector4].
			</description>
		</method>
		<method name="dot" qualifiers="const">
			<return type="float" />
			<param index="0" name="b" type="Rotor4D" />
			<description>
				The dot product of two rotors is the sum of the products of their components. This measures how aligned the rotors are. Rotors pointing in similar directions have a positive dot product, while rotors pointing in opposite directions have a negative dot product.
			</description>
		</method>
		<method name="dual" qualifiers="const">
			<return type="Rotor4D" />
			<description>
				Dual multiplies each component by the unit pseudoscalar (xyzw) from the right. For example, [code]xy * xyzw = xyxyzw = -xxyyzw = -zw[/code], and [code]xz * xyzw = xzxyzw = +xxyzzw = +yw[/code]. This is symmetric front to back, [code]result[i][/code] is set to [code]+/- elements[15 - i][/code].
			</description>
		</method>
		<method name="from_array" qualifiers="static">
			<return type="Rotor4D" />
			<param index="0" name="from_array" type="PackedFloat32Array" />
			<description>
				Creates a [Rotor4D] from a [PackedFloat32Array] or [PackedFloat64Array]. The array may be of any length, but only the first 8 elements will be used.
			</description>
		</method>
		<method name="from_basis" qualifiers="static">
			<return type="Rotor4D" />
			<param index="0" name="basis" type="Projection" />
			<description>
				Constructs a rotor from the rotation of a [param basis] [Basis4D] stored as a [Projection].
			</description>
		</method>
		<method name="from_bivector_magnitude" qualifiers="static">
			<return type="Rotor4D" />
			<param index="0" name="bivector" type="AABB" />
			<description>
				Constructs a rotor that represents a rotation where the angle is the magnitude of the given bivector, and the planes of rotation are the normalized bivector. This is the inverse of [method get_rotation_bivector_magnitude].
			</description>
		</method>
		<method name="from_bivector_normal_angle" qualifiers="static">
			<return type="Rotor4D" />
			<param index="0" name="bivector_normal" type="AABB" />
			<param index="1" name="angle" type="float" />
			<description>
				Constructs a rotor that represents a rotation where the angle is the given angle, and the planes of rotation are the bivector. The given bivector must be normalized. This is the inverse of [method get_rotation_bivector_normal] and [method get_rotation_angle].
			</description>
		</method>
		<method name="from_numbers" qualifiers="static">
			<return type="Rotor4D" />
			<param index="0" name="s" type="float" />
			<param index="1" name="xy" type="float" />
			<param index="2" name="xz" type="float" />
			<param index="3" name="xw" type="float" />
			<param index="4" name="yz" type="float" />
			<param index="5" name="yw" type="float" />
			<param index="6" name="zw" type="float" />
			<param index="7" name="xyzw" type="float" />
			<description>
				Creates a [Rotor4D] from 8 numbers representing the scalar (s), bivector (xy, xz, xw, yz, yw, zw), and pseudoscalar (xyzw) components.
			</description>
		</method>
		<method name="from_vectors" qualifiers="static">
			<return type="Rotor4D" />
			<param index="0" name="s_xy_xz_xw" type="Vector4" />
			<param index="1" name="yz_yw_zw_xyzw" type="Vector4" />
			<description>
				Constructs a rotor stored in two [Vector4]s. Note that this is NOT the same as the geometric product of two vectors. The first [Vector4] stores the scalar, xy, xz, and xw components, and the second [Vector4] stores the yz, yw, zw, and xyzw components.
			</description>
		</method>
		<method name="from_wy" qualifiers="static">
			<return type="Rotor4D" />
			<param index="0" name="angle" type="float" />
			<description>
				Create a rotor representing a rotation in the wy plane by the given angle. This is the negative of [method from_yw].
			</description>
		</method>
		<method name="from_xw" qualifiers="static">
			<return type="Rotor4D" />
			<param index="0" name="angle" type="float" />
			<description>
				Create a rotor representing a rotation in the xw plane by the given angle.
			</description>
		</method>
		<method name="from_xy" qualifiers="static">
			<return type="Rotor4D" />
			<param index="0" name="angle" type="float" />
			<description>
				Create a rotor representing a rotation in the xy plane by the given angle.
			</description>
		</method>
		<method name="from_xz" qualifiers="static">
			<return type="Rotor4D" />
			<param index="0" name="angle" type="float" />
			<description>
				Create a rotor representing a rotation in the xz plane by the given angle. This is the negative of [method from_zx].
			</description>
		</method>
		<method name="from_yw" qualifiers="static">
			<return type="Rotor4D" />
			<param index="0" name="angle" type="float" />
			<description>
				Create a rotor representing a rotation in the yw plane by the given angle. This is the negative of [method from_wy].
			</description>
		</method>
		<method name="from_yz" qualifiers="static">
			<return type="Rotor4D" />
			<param index="0" name="angle" type="float" />
			<description>
				Create a rotor representing a rotation in the yz plane by the given angle.
			</description>
		</method>
		<method name="from_zw" qualifiers="static">
			<return type="Rotor4D" />
			<param index="0" name="angle" type="float" />
			<description>
				Create a rotor representing a rotation in the zw plane by the given angle.
			</description>
		</method>
		<method name="from_zx" qualifiers="static">
			<return type="Rotor4D" />
			<param index="0" name="angle" type="float" />
			<description>
				Create a rotor representing a rotation in the zx plane by the given angle. This is the negative of [method from_xz].
			</description>
		</method>
		<method name="get_rotation_angle" qualifiers="const">
			<return type="float" />
			<description>
				Returns the angle of the rotation represented by the rotor. This function, and [method get_rotation_bivector_normal], are the inverse of [method get_rotation_bivector_magnitude].
			</description>
		</method>
		<method name="get_rotation_bivector_magnitude" qualifiers="const">
			<return type="AABB" />
			<description>
				Returns the bivector representing the rotation planes of the rotor, where the magnitude of the bivector is the angle of the rotation. This function is the inverse of [method get_rotation_bivector_magnitude].
			</description>
		</method>
		<method name="get_rotation_bivector_normal" qualifiers="const">
			<return type="AABB" />
			<description>
				Returns the normalized bivector representing the rotation planes of the rotor. This function, and [method get_rotation_angle], are the inverse of [method get_rotation_bivector_magnitude].
			</description>
		</method>
		<method name="identity" qualifiers="static">
			<return type="Rotor4D" />
			<description>
				Returns the identity 4D rotor, which has the scalar part 1 and all other parts 0.
			</description>
		</method>
		<method name="inner_product" qualifiers="const">
			<return type="Rotor4D" />
			<param index="0" name="b" type="Rotor4D" />
			<description>
				The full geometric algebra inner product with all components. See scalar_product if you only want the scalar part. This represents a projection and then a contraction. It is bilinear, not symmetric, and may be negative. The inner product two basis rotors is their geometric product if they share all factors.
			</description>
		</method>
		<method name="inverse" qualifiers="const">
			<return type="Rotor4D" />
			<description>
				The inverse of a rotor is the rotor that, when multiplied with the original rotor, results in the identity rotor.
			</description>
		</method>
		<method name="involute" qualifiers="const">
			<return type="Rotor4D" />
			<description>
				Grade involution flips the sign of odd-numbered grades. This is a no-op for 4D rotors. It is included for completeness and clarity.
			</description>
		</method>
		<method name="is_normalized" qualifiers="const">
			<return type="bool" />
			<description>
				Returns true if the rotor is normalized, meaning it has a length of 1.0. Only normalized rotors represent valid pure rotations.
			</description>
		</method>
		<method name="length" qualifiers="const">
			<return type="float" />
			<description>
				Returns the length of the rotor. This is the square root of the sum of the squares of all components.
			</description>
		</method>
		<method name="length_squared" qualifiers="const">
			<return type="float" />
			<description>
				Returns the squared length of the rotor. This is useful for comparing rotor lengths without the need for an expensive square root operation.
			</description>
		</method>
		<method name="normalized" qualifiers="const">
			<return type="Rotor4D" />
			<description>
				Returns a normalized copy of the rotor. The normalized rotor has a length of 1.0, and is computed by dividing each component by the length of the rotor. Only normalized rotors represent valid pure rotations.
			</description>
		</method>
		<method name="regressive_product" qualifiers="const">
			<return type="Rotor4D" />
			<param index="0" name="b" type="Rotor4D" />
			<description>
				The regressive product is the dual of the wedge/exterior/outer product. It represents the largest subspace contained by the input rotors, so long as the duals of the inputs are linearly independent.
			</description>
		</method>
		<method name="reverse" qualifiers="const">
			<return type="Rotor4D" />
			<description>
				The reverse function flips the sign of the bivector components. For 4D rotors, this is identical to the [method conjugate], but both are included for completeness and clarity.
			</description>
		</method>
		<method name="rotate_basis" qualifiers="const">
			<return type="Projection" />
			<param index="0" name="basis" type="Projection" />
			<description>
				Rotates a basis by this rotor. This is equivalent to rotating each vector in the basis by the rotor.
			</description>
		</method>
		<method name="rotate_rotor" qualifiers="const">
			<return type="Rotor4D" />
			<param index="0" name="rotor" type="Rotor4D" />
			<description>
				Rotates a rotor by this rotor. This is equivalent to multiplying the two rotors together, but operators cannot be exposed on classes in GDScript.
			</description>
		</method>
		<method name="rotate_vector" qualifiers="const">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<description>
				Rotates a vector by this rotor.
			</description>
		</method>
		<method name="sandwich" qualifiers="const">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<param index="1" name="right" type="Rotor4D" />
			<description>
				Multiplies the rotor with the vector, and then multiplies the result with the right rotor, returning only the vector part. This is useful for things like rotation operations. Prefer using [method rotate_vector] and [method rotate_basis] instead, unless you're really hungry and want a sandwich.
			</description>
		</method>
		<method name="scalar_product" qualifiers="const">
			<return type="float" />
			<param index="0" name="b" type="Rotor4D" />
			<description>
				The scalar part of the geometric algebra inner product only. This is also the scalar part of multiplication.
			</description>
		</method>
		<method name="slerp" qualifiers="const">
			<return type="Rotor4D" />
			<param index="0" name="to" type="Rotor4D" />
			<param index="1" name="weight" type="float" />
			<description>
				Spherically interpolates between this rotor and the target rotor by the given weight. The weight should be on the range of 0.0 to 1.0. A weight of 0.0 will result in this rotor, and a weight of 1.0 will result in the target rotor.
			</description>
		</method>
		<method name="slerp_fraction" qualifiers="const">
			<return type="Rotor4D" />
			<param index="0" name="weight" type="float" default="0.5" />
			<description>
				Spherically interpolates between the identity rotor and this rotor by the given weight. The weight should be on the range of 0.0 to 1.0. A weight of 0.0 will result in the identity rotor, and a weight of 1.0 will result in this rotor.
			</description>
		</method>
		<method name="to_array" qualifiers="const">
			<return type="PackedFloat32Array" />
			<description>
				Converts the [Rotor4D] to a [PackedFloat32Array] or [PackedFloat64Array]. The array will have 8 elements.
			</description>
		</method>
		<method name="to_basis" qualifiers="const">
			<return type="Projection" />
			<description>
				Converts the rotor to a Basis4D pure rotation matrix. This is equivalent to rotating the identity basis by the rotor, but faster. In GDScript, the basis is bound as a [Projection] for use in Variant.
			</description>
		</method>
		<method name="vector_product" qualifiers="static">
			<return type="Rotor4D" />
			<param index="0" name="a" type="Vector4" />
			<param index="1" name="b" type="Vector4" />
			<description>
				The vector product, also known as the geometric vector product or the Holmér product, is the full multiplication of two vectors. The geometric vector product combines the dot product (scalar) and the wedge/cross product (bivector).
				The interpretation of the result is a Rotor4D that, when applied as the sandwich product to a vector, double-rotates the vector by the angle between the two input vectors. Therefore, for rotating by some angle, the input vectors should have an angle between them of half the desired rotation angle.
			</description>
		</method>
		<method name="wedge_product" qualifiers="const">
			<return type="Rotor4D" />
			<param index="0" name="b" type="Rotor4D" />
			<description>
				The wedge/exterior/outer product is the dual of the regressive product. It represents the smallest subspace containing the input multivectors. The outer product of two basis multivectors is their geometric product if they share no factors.
			</description>
		</method>
		<method name="with_s" qualifiers="const">
			<return type="Rotor4D" />
			<param index="0" name="s" type="float" />
			<description>
				Returns a copy of this rotor with the [member s] scalar component replaced by the given value.
			</description>
		</method>
		<method name="with_xw" qualifiers="const">
			<return type="Rotor4D" />
			<param index="0" name="xw" type="float" />
			<description>
				Returns a copy of this rotor with the [member xw] bivector component replaced by the given value.
			</description>
		</method>
		<method name="with_xy" qualifiers="const">
			<return type="Rotor4D" />
			<param index="0" name="xy" type="float" />
			<description>
				Returns a copy of this rotor with the [member xy] bivector component replaced by the given value.
			</description>
		</method>
		<method name="with_xyzw" qualifiers="const">
			<return type="Rotor4D" />
			<param index="0" name="xyzw" type="float" />
			<description>
				Returns a copy of this rotor with the [member xyzw] pseudoscalar component replaced by the given value.
			</description>
		</method>
		<method name="with_xz" qualifiers="const">
			<return type="Rotor4D" />
			<param index="0" name="xz" type="float" />
			<description>
				Returns a copy of this rotor with the [member xz] bivector component replaced by the given value.
			</description>
		</method>
		<method name="with_yw" qualifiers="const">
			<return type="Rotor4D" />
			<param index="0" name="yw" type="float" />
			<description>
				Returns a copy of this rotor with the [member yw] bivector component replaced by the given value.
			</description>
		</method>
		<method name="with_yz" qualifiers="const">
			<return type="Rotor4D" />
			<param index="0" name="yz" type="float" />
			<description>
				Returns a copy of this rotor with the [member yz] bivector component replaced by the given value.
			</description>
		</method>
		<method name="with_zw" qualifiers="const">
			<return type="Rotor4D" />
			<param index="0" name="zw" type="float" />
			<description>
				Returns a copy of this rotor with the [member zw] bivector component replaced by the given value.
			</description>
		</method>
	</methods>
	<members>
		<member name="bivector" type="AABB" setter="set_bivector" getter="get_bivector" default="AABB(0, 0, 0, 0, 0, 0)">
			All of the bivector components packed into an [AABB] for binding to Variant. In total its values represent the sine of half the rotation angle in each plane, where each component is the shadow of the rotation in that plane.
		</member>
		<member name="s" type="float" setter="set_s" getter="get_s" default="0.0">
			The scalar part of the rotor. This is the real number part of the rotor. For simple rotations, this represents the cosine of half the rotation angle.
		</member>
		<member name="split_complex" type="Vector2" setter="set_split_complex" getter="get_split_complex" default="Vector2(0, 0)">
			The split complex part of the rotor. This is both the scalar and pseudoscalar parts of the rotor, combined into a Vector2.
		</member>
		<member name="xw" type="float" setter="set_xw" getter="get_xw" default="0.0">
			The bivector XW plane component of the rotor. It represents the shadow in the XW plane of the sine of half the rotation angle. For pure rotations in the XW plane, this is the sine of half the rotation angle.
		</member>
		<member name="xy" type="float" setter="set_xy" getter="get_xy" default="0.0">
			The bivector XY plane component of the rotor. It represents the shadow in the XY plane of the sine of half the rotation angle. For pure rotations in the XY plane, this is the sine of half the rotation angle.
		</member>
		<member name="xyzw" type="float" setter="set_xyzw" getter="get_xyzw" default="0.0">
			The pseudoscalar component of the rotor. It is used to represent double rotations. For simple rotations, this is 0.0.
		</member>
		<member name="xz" type="float" setter="set_xz" getter="get_xz" default="0.0">
			The bivector XZ plane component of the rotor. It represents the shadow in the XZ plane of the sine of half the rotation angle. For pure rotations in the XZ plane, this is the sine of half the rotation angle.
		</member>
		<member name="yw" type="float" setter="set_yw" getter="get_yw" default="0.0">
			The bivector YW plane component of the rotor. It represents the shadow in the YW plane of the sine of half the rotation angle. For pure rotations in the YW plane, this is the sine of half the rotation angle.
		</member>
		<member name="yz" type="float" setter="set_yz" getter="get_yz" default="0.0">
			The bivector YZ plane component of the rotor. It represents the shadow in the YZ plane of the sine of half the rotation angle. For pure rotations in the YZ plane, this is the sine of half the rotation angle.
		</member>
		<member name="zw" type="float" setter="set_zw" getter="get_zw" default="0.0">
			The bivector ZW plane component of the rotor. It represents the shadow in the ZW plane of the sine of half the rotation angle. For pure rotations in the ZW plane, this is the sine of half the rotation angle.
		</member>
	</members>
</class>
