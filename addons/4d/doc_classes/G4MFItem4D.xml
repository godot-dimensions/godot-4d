<?xml version="1.0" encoding="UTF-8" ?>
<class name="G4MFItem4D" inherits="Resource" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Base class for all G4MF items.
	</brief_description>
	<description>
		G4MFItem4D is a minimal class that handles common functionality for all G4MF items, including nodes and resources. It has a name, it can be converted to a Dictionary for serializing as JSON, and it can store additional data from extensions.
	</description>
	<tutorials>
		<link title="G4MF Item Schema">https://github.com/godot-dimensions/g4mf/blob/main/specification/schema/g4mf_item.schema.json</link>
	</tutorials>
	<methods>
		<method name="get_additional_data">
			<return type="Variant" />
			<param index="0" name="extension_name" type="StringName" />
			<description>
				Gets additional arbitrary data in this G4MFItem4D instance. This can be used to keep per-item state data in extension classes, which is important because they are stateless. The [param extension_name] is used as a key to store the data, and is generally the name of the extension class, which is not necessarily the same as the name of the extension in the G4MF file. If nothing was set, the return value is [code]null[/code].
			</description>
		</method>
		<method name="has_additional_data">
			<return type="bool" />
			<param index="0" name="extension_name" type="StringName" />
			<description>
				Checks if this G4MFItem4D instance has additional data set for the given extension name. If nothing was set, the return value is [code]false[/code].
			</description>
		</method>
		<method name="int32_array_to_json_array" qualifiers="static">
			<return type="Array" />
			<param index="0" name="int32_array" type="PackedInt32Array" />
			<description>
				Converts a [PackedInt32Array] to a plain [Array] for serializing as JSON. Note: The numbers will still be stored as integers so that Godot does not write a trailing [code].0[/code] in the JSON file. This is the inverse of [method json_array_to_int32_array].
			</description>
		</method>
		<method name="json_array_to_int32_array" qualifiers="static">
			<return type="PackedInt32Array" />
			<param index="0" name="json_array" type="Array" />
			<description>
				Converts a plain [Array] to a [PackedInt32Array]. All values will be cast to integers in the best possible way according to the [Variant] rules. This is the inverse of [method int32_array_to_json_array].
			</description>
		</method>
		<method name="read_item_entries_from_dictionary">
			<return type="void" />
			<param index="0" name="dict" type="Dictionary" />
			<description>
				Reads general G4MF item properties from the given [Dictionary] and apply it to this item. This only considers the [code]"name"[/code] and [code]"extras"[/code] keys. The [code]"name"[/code] is set as the [member item_name] of the item. The [code]"extras"[/code] key is copied to the [Object] metadata, which can be retrieved with [code].get_meta("extras")[/code].
			</description>
		</method>
		<method name="set_additional_data">
			<return type="void" />
			<param index="0" name="extension_name" type="StringName" />
			<param index="1" name="additional_data" type="Variant" />
			<description>
				Sets additional arbitrary data in this G4MFItem4D instance. This can be used to keep per-item state data in extension classes, which is important because they are stateless. The [param extension_name] is used as a key to store the data, and is generally the name of the extension class, which is not necessarily the same as the name of the extension in the G4MF file. The [param additional_data] value can be any type.
			</description>
		</method>
		<method name="write_item_entries_to_dictionary" qualifiers="const">
			<return type="Dictionary" />
			<description>
				Base function for converting items to a [Dictionary]. This function only handles setting the [code]"name"[/code] and [code]"extras"[/code] keys. If implementing a custom G4MF item in script, this can be used as the start of a [code]to_dictionary[/code] function.
			</description>
		</method>
	</methods>
	<members>
		<member name="item_name" type="String" setter="set_item_name" getter="get_item_name" default="&quot;&quot;">
			The name of the G4MF item, stored in the JSON as [code]"name"[/code]. This is the same as [member Resource.resource_name]. If non-empty, this MUST be unique within the G4MF file.
		</member>
	</members>
</class>
