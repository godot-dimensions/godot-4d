<?xml version="1.0" encoding="UTF-8" ?>
<class name="G4MFMeshSurface4D" inherits="G4MFItem4D" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Represents a single surface of visual geometry in G4MF.
	</brief_description>
	<description>
		G4MFMeshSurface4D is a class for 4D mesh surfaces in the G4MF format. A mesh surface is a collection of vertices, edges, and cells that define a part of a mesh. Each surface may have a material.
		[b]Note:[/b]: Godot 4D currently only supports one surface per mesh, but multiple surfaces are allowed in the G4MF format.
	</description>
	<tutorials>
		<link title="G4MF Mesh Specification">https://github.com/godot-dimensions/g4mf/blob/main/specification/parts/mesh.md</link>
		<link title="G4MF Mesh Surface Schema">https://github.com/godot-dimensions/g4mf/blob/main/specification/schema/g4mf.mesh.surface.schema.json</link>
	</tutorials>
	<methods>
		<method name="convert_mesh_surface_for_state" qualifiers="static">
			<return type="G4MFMeshSurface4D" />
			<param index="0" name="g4mf_state" type="G4MFState4D" />
			<param index="1" name="mesh" type="Mesh4D" />
			<param index="2" name="material" type="Material4D" />
			<param index="3" name="deduplicate" type="bool" default="true" />
			<description>
				Converts the given [Mesh4D] into encoded G4MF mesh data and stores this inside of the buffers and accessors of the [G4MFState4D]. This is used for exporting the mesh to G4MF. The returned [G4MFMeshSurface4D] is intended to be used by a [G4MFMesh4D], which goes inside of the [G4MFState4D]. See [method G4MFMesh4D.convert_mesh_into_state].
			</description>
		</method>
		<method name="from_dictionary" qualifiers="static">
			<return type="G4MFMeshSurface4D" />
			<param index="0" name="dict" type="Dictionary" />
			<description>
				Converts the given [Dictionary] representing the JSON of a G4MF mesh to a [G4MFMeshSurface4D]. This will set the fields of the [G4MFMeshSurface4D] and [G4MFItem4D] classes based on the data in the [Dictionary].
			</description>
		</method>
		<method name="generate_tetra_mesh_surface" qualifiers="const">
			<return type="ArrayTetraMesh4D" />
			<param index="0" name="g4mf_state" type="G4MFState4D" />
			<param index="1" name="vertices" type="PackedVector4Array" />
			<description>
				Generates an [ArrayTetraMesh4D] from the G4MF mesh surface data inside of the [G4MFState4D]. This is used for importing a mesh from G4MF. This function will only work properly if the surface has cell indices defined.
			</description>
		</method>
		<method name="generate_wire_mesh_surface" qualifiers="const">
			<return type="ArrayWireMesh4D" />
			<param index="0" name="g4mf_state" type="G4MFState4D" />
			<param index="1" name="vertices" type="PackedVector4Array" />
			<description>
				Generates an [ArrayWireMesh4D] from the G4MF mesh surface data inside of the [G4MFState4D]. This is used for importing a mesh from G4MF. If the mesh surface does not have edge indices but does have cell indices, edges will be calculated from the cells.
			</description>
		</method>
		<method name="is_equal_exact" qualifiers="const">
			<return type="bool" />
			<param index="0" name="other" type="G4MFMeshSurface4D" />
			<description>
				Checks if the [G4MFMeshSurface4D] is equal to another [G4MFMeshSurface4D] exactly by checking if the properties are equal and all accessor indices refer to the same accessors. If a mesh surface refers to a different accessor, even if the data is the same, this will return [code]false[/code]. The name of the mesh surface is not checked, and any metadata is ignored.
			</description>
		</method>
		<method name="load_cell_indices" qualifiers="const">
			<return type="PackedInt32Array" />
			<param index="0" name="g4mf_state" type="G4MFState4D" />
			<description>
				Loads the cell indices from the [G4MFAccessor4D] at [member cells_accessor_index] in the [G4MFState4D]'s accessors array. This is a low-level function that will fail if the index does not refer to a valid [G4MFAccessor4D] or if the accessor does not contain valid cell indices.
			</description>
		</method>
		<method name="load_edge_indices" qualifiers="const">
			<return type="PackedInt32Array" />
			<param index="0" name="g4mf_state" type="G4MFState4D" />
			<description>
				Loads the edge indices from the [G4MFAccessor4D] at [member edges_accessor_index] in the [G4MFState4D]'s accessors array. This is a low-level function that will fail if the index does not refer to a valid [G4MFAccessor4D] or if the accessor does not contain valid edge indices.
			</description>
		</method>
		<method name="to_dictionary" qualifiers="const">
			<return type="Dictionary" />
			<description>
				Converts the G4MF mesh surface to a [Dictionary]. This is used for serializing the G4MF mesh surface as JSON.
			</description>
		</method>
	</methods>
	<members>
		<member name="cells_accessor_index" type="int" setter="set_cells_accessor_index" getter="get_cells_accessor_index" default="-1">
			The index of the [G4MFAccessor4D] in the [G4MFState4D]'s accessors array that contains the cell indices for this surface. Each integer in the array is an index of a vertex in the mesh's vertices array, and MUST NOT exceed the bounds of the mesh's vertices array. If not defined, the surface does not have explicit cells, and may be a wireframe-only surface.
		</member>
		<member name="edges_accessor_index" type="int" setter="set_edges_accessor_index" getter="get_edges_accessor_index" default="-1">
			The index of the [G4MFAccessor4D] in the [G4MFState4D]'s accessors array that contains the edge indices for this surface. Each integer in the array is an index of a vertex in the mesh's vertices array, and MUST NOT exceed the bounds of the mesh's vertices array. If not defined, the surface does not have explicit edges, but edges may be calculated from the cells if needed.
		</member>
		<member name="material_index" type="int" setter="set_material_index" getter="get_material_index" default="-1">
			The index of the [G4MFMaterial4D] in the [G4MFState4D]'s materials array that contains the material for this surface. This is used to define the appearance of the surface. If not defined, the surface should render with a default white material.
		</member>
		<member name="polytope_cells" type="bool" setter="set_polytope_cells" getter="get_polytope_cells" default="false">
			If [code]true[/code], allow treating the tetrahedral cells as part of a larger polytope instead of just simplexes. Each polytope is defined by a set of consecutive cells that share the same starting vertex. This is not used by Godot 4D when importing the mesh.
		</member>
	</members>
</class>
