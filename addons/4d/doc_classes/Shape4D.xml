<?xml version="1.0" encoding="UTF-8" ?>
<class name="Shape4D" inherits="Resource" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Base class for primitive 4D shapes.
	</brief_description>
	<description>
		Shape4D is the base class for all 4D shape resources, such as [BoxShape4D], [SphereShape4D], [CapsuleShape4D], and [CylinderShape4D]. It can be used to provide a shape resource to a [CollisionShape4D] node. Shape4D classes usually describe implicit surfaces, that is, shapes with a surface defined by a mathematical function with a well-defined inside and outside, but not always, such as a concave mesh shape, which is not an implicit surface.
	</description>
	<tutorials>
		<link title="Wikipedia Implicit Surface">https://en.wikipedia.org/wiki/Implicit_surface</link>
	</tutorials>
	<methods>
		<method name="_get_hypervolume" qualifiers="virtual const">
			<return type="float" />
			<description>
				Callback method that should return the hypervolume of a 4D shape. Do not call this method. Override this method if you are implementing a custom 4D shape. It will be called whenever the user calls [method get_hypervolume].
			</description>
		</method>
		<method name="_get_nearest_point" qualifiers="virtual const">
			<return type="Vector4" />
			<param index="0" name="point" type="Vector4" />
			<description>
				Callback method that should return the nearest point to a given point on a 4D shape. Do not call this method. Override this method if you are implementing a custom 4D shape. It will be called whenever the user calls [method get_nearest_point].
			</description>
		</method>
		<method name="_get_rect_bounds" qualifiers="virtual const">
			<return type="PackedVector4Array" />
			<param index="0" name="inv_relative_to_basis" type="Projection" />
			<param index="1" name="inv_relative_to_origin" type="Vector4" />
			<description>
				Callback method that should return the rect bounds of a 4D shape. Do not call this method. Optionally override this method if you are implementing a custom 4D shape. It will be called whenever the user calls [method get_rect_bounds].
				If this method is not overridden, the rect bounds will be calculated automatically based on the results of the [method _get_support_point] callback.
			</description>
		</method>
		<method name="_get_support_point" qualifiers="virtual const">
			<return type="Vector4" />
			<param index="0" name="direction" type="Vector4" />
			<description>
				Callback method that should return the support point in a given direction on a 4D shape. Do not call this method. Override this method if you are implementing a custom 4D shape. It will be called whenever the user calls [method get_support_point].
			</description>
		</method>
		<method name="_get_surface_volume" qualifiers="virtual const">
			<return type="float" />
			<description>
				Callback method that should return the surface volume of a 4D shape. Do not call this method. Override this method if you are implementing a custom 4D shape. It will be called whenever the user calls [method get_surface_volume].
			</description>
		</method>
		<method name="_has_point" qualifiers="virtual const">
			<return type="bool" />
			<param index="0" name="point" type="Vector4" />
			<description>
				Callback method that should return whether a 4D shape contains a given point. Do not call this method. Override this method if you are implementing a custom 4D shape. It will be called whenever the user calls [method has_point].
			</description>
		</method>
		<method name="_is_equal_exact" qualifiers="virtual const">
			<return type="bool" />
			<param index="0" name="shape" type="Shape4D" />
			<description>
				Callback method that should return whether two 4D shapes are exactly equal. Do not call this method. Override this method if you are implementing a custom 4D shape. It will be called whenever the user calls [method is_equal_exact].
			</description>
		</method>
		<method name="_to_tetra_mesh" qualifiers="virtual const">
			<return type="TetraMesh4D" />
			<description>
				Override this method if you are implementing a custom 4D shape. It will be called whenever the user calls [method to_tetra_mesh].
			</description>
		</method>
		<method name="_to_wire_mesh" qualifiers="virtual const">
			<return type="WireMesh4D" />
			<description>
				Override this method if you are implementing a custom 4D shape. It will be called whenever the user calls [method to_wire_mesh].
			</description>
		</method>
		<method name="get_hypervolume" qualifiers="const">
			<return type="float" />
			<description>
				Returns the hypervolume of the 4D shape. This is the 4D equivalent of volume, also known as bulk. It is a four-dimensional quantity measuring the space enclosed by the 4D shape in quartic meters.
			</description>
		</method>
		<method name="get_nearest_point" qualifiers="const">
			<return type="Vector4" />
			<param index="0" name="point" type="Vector4" />
			<description>
				Returns the nearest point to the given point on the 4D shape. If the point is inside the shape, the point itself is returned.
			</description>
		</method>
		<method name="get_rect_bounds" qualifiers="const">
			<return type="PackedVector4Array" />
			<param index="0" name="to_target_basis" type="Projection" default="Projection(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)" />
			<param index="1" name="to_target_origin" type="Vector4" default="Vector4(0, 0, 0, 0)" />
			<description>
				Returns the rectilinear bounding box of this [Node4D] as a Rect4 stored in a [PackedVector4Array] (position, size), relative to the given Transform4D stored as a [Projection] [Basis4D] basis and [Vector4] origin. The parameters you provide are used to transform the shape's points directly from shape space to the target space.
			</description>
		</method>
		<method name="get_support_point" qualifiers="const">
			<return type="Vector4" />
			<param index="0" name="direction" type="Vector4" />
			<description>
				Returns the support point in the given direction on the 4D shape. This is the point on the 4D shape that is farthest in the given direction. This is commonly used in collision detection algorithms.
			</description>
		</method>
		<method name="get_surface_volume" qualifiers="const">
			<return type="float" />
			<description>
				Returns the surface volume of the 4D shape. This is the 4D equivalent of surface area. It is a three-dimensional quantity measuring the boundary of the 4D shape in cubic meters.
			</description>
		</method>
		<method name="has_point" qualifiers="const">
			<return type="bool" />
			<param index="0" name="point" type="Vector4" />
			<description>
				Returns [code]true[/code] if the 4D shape contains the given point. Points exactly on the surface are considered inside.
			</description>
		</method>
		<method name="is_equal_exact" qualifiers="const">
			<return type="bool" />
			<param index="0" name="shape" type="Shape4D" />
			<description>
				Returns [code]true[/code] if the two 4D shapes are exactly equal. This is used to check if two shapes are the same type and have the same parameters. The specific check depends on the shape type. This function never uses approximate equality comparisons, only exact equality.
			</description>
		</method>
		<method name="to_tetra_mesh" qualifiers="const">
			<return type="TetraMesh4D" />
			<description>
				Returns a tetrahedral mesh representation of the 4D shape. May not be implemented for all shapes, and will not be exact for curved shapes.
			</description>
		</method>
		<method name="to_wire_mesh" qualifiers="const">
			<return type="WireMesh4D" />
			<description>
				Returns a wireframe mesh representation of the 4D shape. May not be implemented for all shapes, and will not be exact for curved shapes.
			</description>
		</method>
	</methods>
</class>
