<?xml version="1.0" encoding="UTF-8" ?>
<class name="Vector4D" inherits="Object" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Singleton with extra math functions for Vector4.
	</brief_description>
	<description>
		Vector4D provides extra math functions for [Vector4], supplementing the functions Godot provides in Vector4.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="angle_to" qualifiers="static">
			<return type="float" />
			<param index="0" name="from" type="Vector4" />
			<param index="1" name="to" type="Vector4" />
			<description>
				Returns the unsigned minimum angle between the given vectors, in radians.
			</description>
		</method>
		<method name="axis_color" qualifiers="static">
			<return type="Color" />
			<param index="0" name="axis" type="int" />
			<description>
				Returns a color representing the given axis index. 0 returns red, 1 returns green, 2 returns blue, and 3 returns yellow. Any other value returns gray. The specific color tones match Godot's default editor theme colors for the axes. This does not actually read the colors from the editor theme, making it usable outside the editor, but the colors may not match if the user changes the editor theme.
			</description>
		</method>
		<method name="axis_letter" qualifiers="static">
			<return type="String" />
			<param index="0" name="axis" type="int" />
			<description>
				Returns a letter representing the given axis index. 0 returns "X", 1 returns "Y", 2 returns "Z", and 3 returns "W". Any other value returns a question mark.
			</description>
		</method>
		<method name="bounce" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<param index="1" name="normal" type="Vector4" />
			<description>
				Returns [param vector] "bounced off" from a hyperplane defined by the [param normal] vector.
			</description>
		</method>
		<method name="bounce_ratio" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<param index="1" name="normal" type="Vector4" />
			<param index="2" name="bounce_ratio" type="float" />
			<description>
				Returns [param vector] "bounced off" from a hyperplane defined by the [param normal] vector with the given [param bounce_ratio] defining the bounciness. For physical bouncing, realistic values are on a range of [code]0.0[/code] to [code]1.0[/code]. A ratio of [code]0.0[/code] is equivalent to [method slide], while a ratio of [code]1.0[/code] is equivalent to [method bounce].
			</description>
		</method>
		<method name="cross" qualifiers="static">
			<return type="float" />
			<param index="0" name="a" type="Vector4" />
			<param index="1" name="b" type="Vector4" />
			<description>
				Returns the 4D analog of the cross product for [param a] and [param b]. This is the unsigned area of the parallelogram formed by the two vectors.
				[b]Note:[/b] The cross product is not defined in 4D mathematically. The 3D cross product has 2 properties, the result is perpendicular to the inputs, and the result has a magnitude equal to the area of the parallelogram formed by the inputs. This method provides the second property, but not the first, like [method Vector2.cross]. See also [method perpendicular] if you need a perpendicular vector like the 3D cross product (requires three input vectors).
			</description>
		</method>
		<method name="from_3d" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector3" />
			<param index="1" name="w" type="float" default="0.0" />
			<description>
				Converts a [Vector3] to a [Vector4] with the W component set to [param w], or [code]0.0[/code] if not specified.
			</description>
		</method>
		<method name="from_color" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="color" type="Color" />
			<description>
				Converts a [Color] to a [Vector4] by copying the color's RGBA components into the vector's XYZW components, respectively. This is the inverse of [method to_color].
			</description>
		</method>
		<method name="from_json_array" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="json_array" type="Array" />
			<description>
				Converts a JSON array of numbers to a [Vector4]. If the array contains less than 4 elements, the missing elements are treated as [code]0.0[/code]. If the array contains more than 4 elements, only the first 4 elements are used. Any non-number values are converted as best as possible according to the [Variant] rules. This is the inverse of [method to_json_array].
			</description>
		</method>
		<method name="is_uniform" qualifiers="static">
			<return type="bool" />
			<param index="0" name="vector" type="Vector4" />
			<description>
				Returns [code]true[/code] if all components of [param vector] are equal to each other, [code]false[/code] otherwise.
			</description>
		</method>
		<method name="limit_length" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<param index="1" name="length" type="float" default="1.0" />
			<description>
				Returns [param vector] with a maximum length by limiting its length to [param length].
			</description>
		</method>
		<method name="move_toward" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="from" type="Vector4" />
			<param index="1" name="to" type="Vector4" />
			<param index="2" name="delta" type="float" />
			<description>
				Returns [param from] moved toward [param to] by the fixed [param delta] amount. Will not go past the final value.
			</description>
		</method>
		<method name="perpendicular" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="a" type="Vector4" />
			<param index="1" name="b" type="Vector4" />
			<param index="2" name="c" type="Vector4" />
			<description>
				Given three 4D vectors, find a new 4D vector that is perpendicular to all three. The input vectors must be linearly independent, otherwise a zero vector will be returned. This is similar to the 3D cross product that finds a vector perpendicular to two input vectors. The convention followed by this method is that if it's given +X, +Y, and +Z as inputs in that order, it will return +W, similar to the 3D cross product of +X and +Y returning +Z.
				[b]Note:[/b] The 3D cross product has 2 properties, the result is perpendicular to the inputs, and the result has a magnitude equal to the area of the parallelogram formed by the inputs. This method provides the first property, but not the second, like [method Vector2.orthogonal]. See also [method cross] for the 4D analog of the cross product between two vectors which returns a scalar representing the unsigned area of the parallelogram formed by the two vectors, similar to the 2D cross product [method Vector2.cross].
			</description>
		</method>
		<method name="project" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<param index="1" name="on_normal" type="Vector4" />
			<description>
				Returns [param vector] projected onto the vector [param on_normal].
			</description>
		</method>
		<method name="random_in_radius" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="radius" type="float" default="1.0" />
			<description>
				Returns a random [Vector4] inside a 4D sphere (hypersphere) with the given [param radius], inclusive. If the radius is not specified, it defaults to [code]1.0[/code]. The returned vector is uniformly distributed inside the hypersphere.
			</description>
		</method>
		<method name="random_in_range" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="from" type="Vector4" default="Vector4(0, 0, 0, 0)" />
			<param index="1" name="to" type="Vector4" default="Vector4(1, 1, 1, 1)" />
			<description>
				Returns a random [Vector4] between the two given vectors, inclusive. If the vectors are not specified, they default to zero and one vectors respectively. The returned vector is uniformly distributed inside the box defined by the two vectors.
			</description>
		</method>
		<method name="reflect" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<param index="1" name="normal" type="Vector4" />
			<description>
				Returns [param vector] reflected from a hyperplane defined by the [param normal] vector.
			</description>
		</method>
		<method name="rotate_in_plane" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<param index="1" name="plane_from" type="Vector4" />
			<param index="2" name="plane_to" type="Vector4" />
			<param index="3" name="angle" type="float" />
			<description>
				Rotates [param vector] in the plane defined by the [param plane_from] and [param plane_to] vectors by the given [param angle] in radians. The rotation happens from [param plane_from] to [param plane_to], such that a rotation of [code]TAU / 4[/code] will rotate [param plane_from] to [param plane_to].
			</description>
		</method>
		<method name="slide" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<param index="1" name="normal" type="Vector4" />
			<description>
				Returns the component of [param vector] along a hyperplane defined by the [param normal] vector.
			</description>
		</method>
		<method name="to_3d" qualifiers="static">
			<return type="Vector3" />
			<param index="0" name="vector" type="Vector4" />
			<description>
				Converts a [Vector4] to a [Vector3] by discarding the W component.
			</description>
		</method>
		<method name="to_color" qualifiers="static">
			<return type="Color" />
			<param index="0" name="vector" type="Vector4" />
			<description>
				Converts a [Vector4] to a [Color] by copying the vector's XYZW components into the color's RGBA components, respectively. This is the inverse of [method from_color]. The vector's components are not clamped, this is a trivial conversion that does not perform any validation.
			</description>
		</method>
		<method name="to_json_array" qualifiers="static">
			<return type="Array" />
			<param index="0" name="vector" type="Vector4" />
			<description>
				Converts a [Vector4] to a JSON array of numbers. The array will contain 4 elements, one for each component of the vector. This is the inverse of [method from_json_array].
			</description>
		</method>
	</methods>
</class>
