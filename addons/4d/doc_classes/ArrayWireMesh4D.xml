<?xml version="1.0" encoding="UTF-8" ?>
<class name="ArrayWireMesh4D" inherits="WireMesh4D" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Custom 4D wireframe mesh class.
	</brief_description>
	<description>
		ArrayWireMesh4D is a class for specifying wireframe meshes with arrays of data, including the vertices and edges. Unlike the specialized [WireMesh4D] classes such as [BoxWireMesh4D], ArrayWireMesh4D can store any wireframe mesh, allowing users to create custom meshes with arbitrary data.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="append_edge_indices">
			<return type="int" />
			<param index="0" name="index_a" type="int" />
			<param index="1" name="index_b" type="int" />
			<param index="2" name="deduplicate" type="bool" default="true" />
			<description>
				Append an edge to the wireframe mesh, given indices of existing vertices in the [member vertices] array. The indices should point to vertices in the [member vertices] array. The indices should not exceed the length of the vertices array, or else the mesh is invalid.
			</description>
		</method>
		<method name="append_edge_points">
			<return type="int" />
			<param index="0" name="point_a" type="Vector4" />
			<param index="1" name="point_b" type="Vector4" />
			<param index="2" name="deduplicate" type="bool" default="true" />
			<description>
				Append an edge to the wireframe mesh, given the positions of the edge's endpoints in local space. If [param deduplicate] is [code]true[/code], the method will check if the vertices already exist in the vertices array and will use those instead. Otherwise, if [param deduplicate] is [code]false[/code], or if no existing vertices match, the method will append the points as new vertices to the [member vertices] array.
			</description>
		</method>
		<method name="append_vertex">
			<return type="int" />
			<param index="0" name="vertex" type="Vector4" />
			<param index="1" name="deduplicate" type="bool" default="true" />
			<description>
				Append a vertex to the wireframe mesh. If [param deduplicate] is [code]true[/code], the method will check if the vertex already exists in the [member vertices] array and return the index of the existing vertex. If the vertex does not exist, it will be appended to the vertices array and its index will be returned. In both cases, the returned index points to a vertex identical to the input vertex.
			</description>
		</method>
		<method name="append_vertices">
			<return type="PackedInt32Array" />
			<param index="0" name="vertices" type="PackedVector4Array" />
			<param index="1" name="deduplicate" type="bool" default="true" />
			<description>
				Append an array of vertices to the wireframe mesh, by calling [method append_vertex] for each vertex in the input array. The method will return an array of indices, where each index points to a vertex identical to the corresponding vertex in the input array.
			</description>
		</method>
		<method name="merge_with">
			<return type="void" />
			<param index="0" name="other" type="ArrayWireMesh4D" />
			<param index="1" name="offset" type="Vector4" default="Vector4(0, 0, 0, 0)" />
			<param index="2" name="basis" type="Projection" default="Projection(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)" />
			<description>
				Merges this wireframe mesh with another wireframe mesh. The other mesh's vertices and edges are added to this mesh. The [param offset] and [param basis] parameters are used to transform the other mesh's vertices before adding them to this mesh. This is useful for combining meshes that are in different positions or orientations.
				This method will also attempt to merge the materials of the two meshes, by calling [method Material4D.merge_with] on this mesh's material and passing the other mesh's material as an argument. See [method Material4D.merge_with] for more information.
			</description>
		</method>
		<method name="subdivide_edges">
			<return type="void" />
			<param index="0" name="subdivision_segments" type="int" default="2" />
			<description>
				Subdivides the edges of the wireframe mesh into smaller segments. Each edge of the original mesh will be divided into [param subdivision_segments] segments, such that the edge count will be multiplied by [param subdivision_segments]. The new vertices will be added to the end of the [member vertices] array, and the new edges will be added to the end of the [member edge_indices] array.
			</description>
		</method>
		<method name="subdivide_one_edge">
			<return type="void" />
			<param index="0" name="edge_number" type="int" />
			<param index="1" name="subdivision_segments" type="int" default="2" />
			<description>
				Subdivides a single edge of the wireframe mesh into smaller segments. The edge is specified by its edge number, which is half the index of the edge indices in the [member edge_indices] array. The edge will be divided into [param subdivision_segments] segments, such that [code]subdivision_segments - 1[/code] new vertices will be added to the end of the [member vertices] array, and [code]subdivision_segments - 1[/code] new edges will be added to the end of the [member edge_indices] array.
			</description>
		</method>
	</methods>
	<members>
		<member name="edge_indices" type="PackedInt32Array" setter="set_edge_indices" getter="get_edge_indices" default="PackedInt32Array()">
			The flat array of edge indices. Every 2 integers defines an edge. Each integer is an index to the [member vertices] array. Integers in this array should not exceed the length of the vertices array, or else the mesh is invalid.
		</member>
		<member name="vertices" type="PackedVector4Array" setter="set_vertices" getter="get_vertices" default="PackedVector4Array()">
			The vertices of the wireframe mesh. Each Vector4 in this array is a vertex defined as a position in meters in 4D space. The items in this array are referenced by the [member edge_indices] array.
		</member>
	</members>
</class>
